{"version":3,"file":"index-umd.min.cjs","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable promise/prefer-await-to-then,\n    promise/no-callback-in-promise -- Convenient */\n\n/**\n * @typedef {null|boolean|number|string} JSONPrimitives\n */\n\n/**\n * @typedef {JSONPrimitives[]|\n *   Record<string, JSONPrimitives|JSONPrimitives[]>} JSON\n */\n\n/**\n * @callback StatusHandler\n * @param {Response} response\n * @returns {Promise<Response>}\n */\n/**\n * @function statusOK\n * @param {Response} response\n * @type {StatusHandler}\n * @returns {Promise<Response>}\n */\nfunction statusOK (response) {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response);\n  }\n  return Promise.reject(new Error(response.statusText));\n}\n\n/**\n * @callback RetrievalHandler\n * @param {Response} response\n * @returns {JSON|Promise<JSON>} The return will be what is returned by\n *  `postJSON` unless it also has a {@link PostJSONCallback} callback.\n */\n/**\n * @type {RetrievalHandler}\n */\nfunction retrievalJSON (response) {\n  return response.json();\n}\n\n/**\n * The keys are header names and the values their values.\n * @typedef {Record<string, string>} Headers\n*/\n\n/* eslint-disable jsdoc/reject-any-type -- Genuinely arbitrary */\n/**\n * @typedef {any} AnyValue\n */\n/* eslint-enable jsdoc/reject-any-type -- Genuinely arbitrary */\n\n/**\n* @callback PostJSONErrback\n* @param {Error} Any error caught during `fetch`, {@link StatusHandler},\n*   {@link RetrievalHandler}, or, if present, {@link PostJSONCallback}.\n* @returns {AnyValue} Its return will serve as the return of `postJSON` in the\n*   event of it catching an error.\n*/\n\n/**\n* @callback PostJSONCallback\n* @param {AnyValue} result The result of `postJSON`'s {@link RetrievalHandler}\n*   (by default {@link retrievalJSON})\n* @returns {JSON|Promise<JSON>} Any promise will feed into `errBack` if present.\n*   This value will serve as the `postJSON` return result.\n*/\n\n/* eslint-disable @stylistic/max-len -- Long */\n/**\n* @typedef {object} PostJSONOptions\n* @property {JSON} [body]\n* @property {string} [url]\n* @property {PostJSONCallback} [callback]\n* @property {PostJSONErrback} [errBack]\n* @property {StatusHandler} [status=statusOK]\n* @property {RetrievalHandler} [retrieval=retrievalJSON]\n* @property {\"omit\"|\"same-origin\"|\"include\"} [credentials=\"same-origin\"]\n*   \"omit\" is `fetch` default\n* @property {Headers} [headers={\"Accept\": \"application/json\",\"Content-Type\": \"application/json\"}]\n*/\n/* eslint-enable @stylistic/max-len -- Long */\n\n/**\n *\n * @param {string|PostJSONOptions} [url]\n * @param {JSON} [bodyObject] Will be overridden by `url.body` if present\n * @param {PostJSONCallback} [cb]\n * @param {PostJSONErrback} [errBack]\n * @returns {Promise<AnyValue>}\n */\nfunction postJSON (url, bodyObject, cb, errBack) {\n  /** @type {RequestInit} */\n  const dataObject = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  /** @type {RequestCredentials} */\n  let credentials = 'same-origin';\n  let\n    statusCb = statusOK,\n    retrievalCb = retrievalJSON;\n\n  if (url && typeof url === 'object') {\n    bodyObject = url.body || bodyObject;\n    cb = url.callback || cb;\n    errBack = url.errBack || errBack;\n\n    // Properties only available via this object argument API\n    statusCb = url.status || statusOK;\n    retrievalCb = url.retrieval || retrievalJSON;\n\n    credentials = url.credentials || credentials;\n    dataObject.headers = Object.assign(\n      /** @type {HeadersInit} */ (dataObject.headers), url.headers\n    );\n\n    ({url} = url);\n  }\n  if (bodyObject) {\n    dataObject.body = JSON.stringify(bodyObject);\n  }\n  dataObject.credentials = credentials;\n  /* c8 ignore next 3 */\n  // @ts-expect-error Ok\n  // eslint-disable-next-line unicorn/prefer-global-this -- Ok\n  let ret = (typeof window !== 'undefined' ? fetch : postJSON.fetch)(\n    url, dataObject\n  ).then(statusCb).then(retrievalCb);\n  if (cb) {\n    ret = ret.then(cb);\n  }\n  if (errBack) {\n    ret = ret.catch(errBack);\n  }\n  return ret;\n}\npostJSON.retrieval = retrievalJSON;\npostJSON.status = statusOK;\n\nexport default postJSON;\n"],"names":["statusOK","response","status","Promise","resolve","reject","Error","statusText","retrievalJSON","json","postJSON","url","bodyObject","cb","errBack","dataObject","method","headers","Accept","credentials","statusCb","retrievalCb","body","callback","retrieval","Object","assign","JSON","stringify","ret","window","fetch","then","catch"],"mappings":"wOAuBA,SAASA,EAAUC,GACjB,OAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IACvCC,QAAQC,QAAQH,GAElBE,QAAQE,OAAO,IAAIC,MAAML,EAASM,YAC3C,CAWA,SAASC,EAAeP,GACtB,OAAOA,EAASQ,MAClB,CAoDA,SAASC,EAAUC,EAAKC,EAAYC,EAAIC,GAEtC,MAAMC,EAAa,CACjBC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,qBAIpB,IAAIC,EAAc,cAEhBC,EAAWpB,EACXqB,EAAcb,EAEZG,GAAsB,iBAARA,IAChBC,EAAaD,EAAIW,MAAQV,EACzBC,EAAKF,EAAIY,UAAYV,EACrBC,EAAUH,EAAIG,SAAWA,EAGzBM,EAAWT,EAAIT,QAAUF,EACzBqB,EAAcV,EAAIa,WAAahB,EAE/BW,EAAcR,EAAIQ,aAAeA,EACjCJ,EAAWE,QAAUQ,OAAOC,OACEX,EAAWE,QAAUN,EAAIM,WAGrDN,OAAOA,IAEPC,IACFG,EAAWO,KAAOK,KAAKC,UAAUhB,IAEnCG,EAAWI,YAAcA,EAIzB,IAAIU,GAAyB,oBAAXC,OAAyBC,MAAQrB,EAASqB,OAC1DpB,EAAKI,GACLiB,KAAKZ,GAAUY,KAAKX,GAOtB,OANIR,IACFgB,EAAMA,EAAIG,KAAKnB,IAEbC,IACFe,EAAMA,EAAII,MAAMnB,IAEXe,CACT,QACAnB,EAASc,UAAYhB,EACrBE,EAASR,OAASF"}