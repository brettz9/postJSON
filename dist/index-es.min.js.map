{"version":3,"file":"index-es.min.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-env browser */\n/* eslint-disable promise/prefer-await-to-then,\n    promise/no-callback-in-promise */\n\n/**\n * @callback StatusHandler\n * @param {Response} response\n * @returns {Promise<Response>}\n */\n/**\n * @function statusOK\n * @param {Response} response\n * @type {StatusHandler}\n * @returns {Promise<Response>}\n */\nfunction statusOK (response) {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response);\n  }\n  return Promise.reject(new Error(response.statusText));\n}\n\n/**\n * @callback RetrievalHandler\n * @param {Response} response\n * @returns {any|Promise<any>} The return will be what is returned by\n *  `postJSON` unless it also has a {@link PostJSONCallback} callback.\n */\n/**\n * @function retrievalJSON\n * @param {Response} response\n * @type {RetrievalHandler}\n * @returns {JSON}\n */\nfunction retrievalJSON (response) {\n  return response.json();\n}\n\n/**\n * The keys are header names and the values their values.\n * @typedef {PlainObject<string, string>} Headers\n*/\n\n/**\n * @typedef {any} AnyValue\n */\n\n/**\n* @callback PostJSONErrback\n* @param {Error} Any error caught during `fetch`, {@link StatusHandler},\n*   {@link RetrievalHandler}, or, if present, {@link PostJSONCallback}.\n* @returns {AnyValue} Its return will serve as the return of `postJSON` in the\n*   event of it catching an error.\n*/\n\n/**\n* @callback PostJSONCallback\n* @param {AnyValue} result The result of `postJSON`'s {@link RetrievalHandler}\n*   (by default {@link retrievalJSON})\n* @returns {any|Promise<any>} Any promise will feed into `errBack` if present.\n*   This value will serve as the `postJSON` return result.\n*/\n\n/* eslint-disable @stylistic/max-len */\n/**\n* @typedef {object} PostJSONOptions\n* @property {JSON} [body]\n* @property {PostJSONCallback} [callback]\n* @property {PostJSONErrback} [errBack]\n* @property {StatusHandler} [status=statusOK]\n* @property {RetrievalHandler} [retrieval=retrievalJSON]\n* @property {\"omit\"|\"same-origin\"|\"include\"} [credentials=\"same-origin\"]\n*   \"omit\" is `fetch` default\n* @property {Headers} [headers={\"Accept\": \"application/json\",\"Content-Type\": \"application/json\"}]\n*/\n/* eslint-enable @stylistic/max-len */\n\n/**\n *\n * @param {string|PostJSONOptions} [url]\n * @param {JSON} [bodyObject] Will be overridden by `url.body` if present\n * @param {PostJSONCallback} [cb]\n * @param {PostJSONErrback} [errBack]\n * @returns {Promise<any>}\n */\nfunction postJSON (url, bodyObject, cb, errBack) {\n  const dataObject = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  let credentials = 'same-origin',\n    statusCb = statusOK,\n    retrievalCb = retrievalJSON;\n\n  if (url && typeof url === 'object') {\n    bodyObject = url.body || bodyObject;\n    cb = url.callback || cb;\n    errBack = url.errBack || errBack;\n\n    // Properties only available via this object argument API\n    statusCb = url.status || statusOK;\n    retrievalCb = url.retrieval || retrievalJSON;\n\n    credentials = url.credentials || credentials;\n    dataObject.headers = Object.assign(dataObject.headers, url.headers);\n\n    ({url} = url);\n  }\n  if (bodyObject) {\n    dataObject.body = JSON.stringify(bodyObject);\n  }\n  dataObject.credentials = credentials;\n  /* c8 ignore next */\n  let ret = (typeof window !== 'undefined' ? fetch : postJSON.fetch)(\n    url, dataObject\n  ).then(statusCb).then(retrievalCb);\n  if (cb) {\n    ret = ret.then(cb);\n  }\n  if (errBack) {\n    ret = ret.catch(errBack);\n  }\n  return ret;\n}\npostJSON.retrieval = retrievalJSON;\npostJSON.status = statusOK;\n\nexport default postJSON;\n"],"names":["statusOK","response","status","Promise","resolve","reject","Error","statusText","retrievalJSON","json","postJSON","url","bodyObject","cb","errBack","dataObject","method","headers","Accept","credentials","statusCb","retrievalCb","_typeof","body","callback","retrieval","Object","assign","JSON","stringify","ret","window","fetch","then"],"mappings":"sOAeA,SAASA,EAAUC,GACjB,OAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IACvCC,QAAQC,QAAQH,GAElBE,QAAQE,OAAO,IAAIC,MAAML,EAASM,YAC3C,CAcA,SAASC,EAAeP,GACtB,OAAOA,EAASQ,MAClB,CAiDA,SAASC,EAAUC,EAAKC,EAAYC,EAAIC,GACtC,IAAMC,EAAa,CACjBC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,qBAGhBC,EAAc,cAChBC,EAAWpB,EACXqB,EAAcb,EAEZG,GAAsB,WAAfW,EAAOX,KAChBC,EAAaD,EAAIY,MAAQX,EACzBC,EAAKF,EAAIa,UAAYX,EACrBC,EAAUH,EAAIG,SAAWA,EAGzBM,EAAWT,EAAIT,QAAUF,EACzBqB,EAAcV,EAAIc,WAAajB,EAE/BW,EAAcR,EAAIQ,aAAeA,EACjCJ,EAAWE,QAAUS,OAAOC,OAAOZ,EAAWE,QAASN,EAAIM,SAEzDN,EAAOA,EAAPA,KAEAC,IACFG,EAAWQ,KAAOK,KAAKC,UAAUjB,IAEnCG,EAAWI,YAAcA,EAEzB,IAAIW,GAAyB,oBAAXC,OAAyBC,MAAQtB,EAASsB,OAC1DrB,EAAKI,GACLkB,KAAKb,GAAUa,KAAKZ,GAOtB,OANIR,IACFiB,EAAMA,EAAIG,KAAKpB,IAEbC,IACFgB,EAAMA,EAAS,MAAChB,IAEXgB,CACT,CACApB,EAASe,UAAYjB,EACrBE,EAASR,OAASF"}